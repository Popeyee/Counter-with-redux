{"ast":null,"code":"// import { createStore } from \"redux\";\nimport { configureStore, createSlice } from \"@reduxjs/toolkit\";\nimport Auth from \"../components/Auth\";\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: initialCounterState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n    decrement(state) {\n      state.counter--;\n    },\n    increase(state, action) {\n      state.counter = state.counter + action.payload;\n    },\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n  }\n});\nconst initialAuthState = {\n  isAuthenticated: false\n};\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState: initialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n  }\n});\n\n// const counterReducer = (state = initialState , action) => {\n//     if (action.type === \"increment\") {\n//         return {\n//             counter: state.counter + 1,\n//             showCounter: true\n//         }\n//     }\n//     if(action.type === \"decrement\") {\n//         return {\n//             counter: state.counter - 1,\n//             showCounter: true\n//         }\n//     }\n//     if(action.type === \"increase\") {\n//         return {\n//             counter: state.counter + action.amount,\n//             showCounter: true\n//         }\n//     }\n//     if(action.type === \"toggle\") {\n//         return {\n//             counter: state.counter,\n//             showCounter: !state.showCounter\n//         }\n//     }\n\n//     return state;\n\n// };\n\nconst store = configureStore({\n  reducer: {\n    counter: counterSlice.reducer,\n    auth: authSlice.reducer\n  }\n});\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\nexport default store;","map":{"version":3,"names":["configureStore","createSlice","Auth","initialCounterState","counter","showCounter","counterSlice","name","initialState","reducers","increment","state","decrement","increase","action","payload","toggleCounter","initialAuthState","isAuthenticated","authSlice","login","logout","store","reducer","auth","counterActions","actions","authActions"],"sources":["/Users/alielalaoui/Documents/Udemy/Web_Dev_bootcamp/react-complete-guide/redux1/src/store/index.js"],"sourcesContent":["// import { createStore } from \"redux\";\nimport { configureStore, createSlice } from \"@reduxjs/toolkit\";\nimport Auth from \"../components/Auth\";\n\n\nconst initialCounterState = { \n    counter: 0, \n    showCounter: true \n};\n\nconst counterSlice = createSlice({\n    name: 'counter',\n    initialState: initialCounterState,\n    reducers: {\n        increment(state) {\n            state.counter++;\n        },\n        decrement(state) {\n            state.counter--;\n        },\n        increase(state, action) {\n            state.counter = state.counter + action.payload;\n        },\n        toggleCounter(state) {\n            state.showCounter = !state.showCounter;\n        }\n    }\n});\n\nconst initialAuthState = { \n    isAuthenticated: false\n}\n\nconst authSlice = createSlice({\n    name: 'auth',\n    initialState: initialAuthState,\n    reducers: {\n        login (state) {\n            state.isAuthenticated = true;\n        },\n        logout(state) {\n            state.isAuthenticated = false;\n        }\n    }\n})\n\n\n \n// const counterReducer = (state = initialState , action) => {\n//     if (action.type === \"increment\") {\n//         return {\n//             counter: state.counter + 1,\n//             showCounter: true\n//         }\n//     }\n//     if(action.type === \"decrement\") {\n//         return {\n//             counter: state.counter - 1,\n//             showCounter: true\n//         }\n//     }\n//     if(action.type === \"increase\") {\n//         return {\n//             counter: state.counter + action.amount,\n//             showCounter: true\n//         }\n//     }\n//     if(action.type === \"toggle\") {\n//         return {\n//             counter: state.counter,\n//             showCounter: !state.showCounter\n//         }\n//     }\n\n//     return state;\n\n// };\n\nconst store = configureStore({\n    reducer: {counter: counterSlice.reducer, auth: authSlice.reducer }\n});\n\nexport const counterActions = counterSlice.actions;\nexport const authActions = authSlice.actions;\n\nexport default store;"],"mappings":"AAAA;AACA,SAASA,cAAc,EAAEC,WAAW,QAAQ,kBAAkB;AAC9D,OAAOC,IAAI,MAAM,oBAAoB;AAGrC,MAAMC,mBAAmB,GAAG;EACxBC,OAAO,EAAE,CAAC;EACVC,WAAW,EAAE;AACjB,CAAC;AAED,MAAMC,YAAY,GAAGL,WAAW,CAAC;EAC7BM,IAAI,EAAE,SAAS;EACfC,YAAY,EAAEL,mBAAmB;EACjCM,QAAQ,EAAE;IACNC,SAAS,CAACC,KAAK,EAAE;MACbA,KAAK,CAACP,OAAO,EAAE;IACnB,CAAC;IACDQ,SAAS,CAACD,KAAK,EAAE;MACbA,KAAK,CAACP,OAAO,EAAE;IACnB,CAAC;IACDS,QAAQ,CAACF,KAAK,EAAEG,MAAM,EAAE;MACpBH,KAAK,CAACP,OAAO,GAAGO,KAAK,CAACP,OAAO,GAAGU,MAAM,CAACC,OAAO;IAClD,CAAC;IACDC,aAAa,CAACL,KAAK,EAAE;MACjBA,KAAK,CAACN,WAAW,GAAG,CAACM,KAAK,CAACN,WAAW;IAC1C;EACJ;AACJ,CAAC,CAAC;AAEF,MAAMY,gBAAgB,GAAG;EACrBC,eAAe,EAAE;AACrB,CAAC;AAED,MAAMC,SAAS,GAAGlB,WAAW,CAAC;EAC1BM,IAAI,EAAE,MAAM;EACZC,YAAY,EAAES,gBAAgB;EAC9BR,QAAQ,EAAE;IACNW,KAAK,CAAET,KAAK,EAAE;MACVA,KAAK,CAACO,eAAe,GAAG,IAAI;IAChC,CAAC;IACDG,MAAM,CAACV,KAAK,EAAE;MACVA,KAAK,CAACO,eAAe,GAAG,KAAK;IACjC;EACJ;AACJ,CAAC,CAAC;;AAIF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,MAAMI,KAAK,GAAGtB,cAAc,CAAC;EACzBuB,OAAO,EAAE;IAACnB,OAAO,EAAEE,YAAY,CAACiB,OAAO;IAAEC,IAAI,EAAEL,SAAS,CAACI;EAAQ;AACrE,CAAC,CAAC;AAEF,OAAO,MAAME,cAAc,GAAGnB,YAAY,CAACoB,OAAO;AAClD,OAAO,MAAMC,WAAW,GAAGR,SAAS,CAACO,OAAO;AAE5C,eAAeJ,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}